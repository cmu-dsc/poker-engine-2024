syntax = "proto3";

package pokerbot;

// Defines the actions that can be taken in the game.
enum ActionType {
  FOLD = 0;
  CALL = 1;
  CHECK = 2;
  RAISE = 3;
}

// Represents a card, encoding both its rank and suit.
message Card {
  string value = 1; // Example: "AH" for Ace of Hearts
}

// Represents an action taken by a player, with an optional amount for raises.
message ActionHistory {
  ActionType action = 1;
  int64 amount = 2; // Relevant for RAISE actions, otherwise 0
}

// Sent at the beginning of each round to set the state for each player.
message StartRoundMessage {
  float game_clock = 1;
  int32 player_index = 2;
  repeated Card player_hand = 3;
  repeated Card board_cards = 4; // Initially empty, updated as the round progresses
}

// Request from the engine to the bot for taking an action. Includes the last action taken for context.
message ActionRequest {
  optional ActionHistory last_action = 1; // Last action taken in the game, empty for the first action of the round
}

// Response from the bot indicating the action it chooses to take.
message ActionResponse {
  ActionType action = 1;
  int64 amount = 2; // Amount for RAISE actions
}

// Sent at the end of a match, revealing the opponent's hand and the result.
message EndMatchMessage {
  repeated Card opponent_hand = 1;
  int64 bankroll_delta = 2; // Change in the player's bankroll after the match
  bool is_game_over = 3; // Indicates if the session is over
}

// Checks if the bot is ready to start or continue the game.
message ReadyCheckRequest {
}

// Response to a ReadyCheck, indicating if the bot is ready.
message ReadyCheckResponse {
  bool ready = 1;
}

// Service definition for interactions between the game engine (client) and the poker bot (server).
service PokerBotService {
  rpc ReadyCheck (ReadyCheckRequest) returns (ReadyCheckResponse) {}
  rpc StartRound (StartRoundMessage) returns (ActionResponse) {} // Initial call to start the round, expecting an immediate action or pass
  rpc RequestAction (ActionRequest) returns (ActionResponse) {} // Subsequent calls for actions within the round
  rpc EndMatch (EndMatchMessage) returns (ReadyCheckResponse) {} // Signals the end of a match, optionally using ReadyCheckResponse to immediately check readiness for the next match
}
