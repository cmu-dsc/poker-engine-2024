# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pokerbot_pb2 as pokerbot__pb2


class PokerBotServiceStub(object):
    """Service definition for interactions between the game engine (client) and the poker bot (server).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadyCheck = channel.unary_unary(
                '/pokerbot.PokerBotService/ReadyCheck',
                request_serializer=pokerbot__pb2.ReadyCheckRequest.SerializeToString,
                response_deserializer=pokerbot__pb2.ReadyCheckResponse.FromString,
                )
        self.StartPhase = channel.unary_unary(
                '/pokerbot.PokerBotService/StartPhase',
                request_serializer=pokerbot__pb2.StartPhaseMessage.SerializeToString,
                response_deserializer=pokerbot__pb2.ActionResponse.FromString,
                )
        self.RequestAction = channel.unary_unary(
                '/pokerbot.PokerBotService/RequestAction',
                request_serializer=pokerbot__pb2.ActionRequest.SerializeToString,
                response_deserializer=pokerbot__pb2.ActionResponse.FromString,
                )
        self.EndRound = channel.unary_unary(
                '/pokerbot.PokerBotService/EndRound',
                request_serializer=pokerbot__pb2.EndRoundMessage.SerializeToString,
                response_deserializer=pokerbot__pb2.ReadyCheckResponse.FromString,
                )


class PokerBotServiceServicer(object):
    """Service definition for interactions between the game engine (client) and the poker bot (server).
    """

    def ReadyCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartPhase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PokerBotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadyCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadyCheck,
                    request_deserializer=pokerbot__pb2.ReadyCheckRequest.FromString,
                    response_serializer=pokerbot__pb2.ReadyCheckResponse.SerializeToString,
            ),
            'StartPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.StartPhase,
                    request_deserializer=pokerbot__pb2.StartPhaseMessage.FromString,
                    response_serializer=pokerbot__pb2.ActionResponse.SerializeToString,
            ),
            'RequestAction': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAction,
                    request_deserializer=pokerbot__pb2.ActionRequest.FromString,
                    response_serializer=pokerbot__pb2.ActionResponse.SerializeToString,
            ),
            'EndRound': grpc.unary_unary_rpc_method_handler(
                    servicer.EndRound,
                    request_deserializer=pokerbot__pb2.EndRoundMessage.FromString,
                    response_serializer=pokerbot__pb2.ReadyCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pokerbot.PokerBotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PokerBotService(object):
    """Service definition for interactions between the game engine (client) and the poker bot (server).
    """

    @staticmethod
    def ReadyCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pokerbot.PokerBotService/ReadyCheck',
            pokerbot__pb2.ReadyCheckRequest.SerializeToString,
            pokerbot__pb2.ReadyCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pokerbot.PokerBotService/StartPhase',
            pokerbot__pb2.StartPhaseMessage.SerializeToString,
            pokerbot__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pokerbot.PokerBotService/RequestAction',
            pokerbot__pb2.ActionRequest.SerializeToString,
            pokerbot__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pokerbot.PokerBotService/EndRound',
            pokerbot__pb2.EndRoundMessage.SerializeToString,
            pokerbot__pb2.ReadyCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
